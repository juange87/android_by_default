apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply from: '../config/quality/quality.gradle'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
    buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        applicationId 'com.juange.androidbydefault'
        versionCode globalConfiguration["androidVersionCode"]
        versionName globalConfiguration["androidVersionName"]
        testInstrumentationRunner globalConfiguration["testInstrumentationRunner"]
        testApplicationId globalConfiguration["testApplicationId"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        // You must set up an environment var before release signing
        // Run: export APP_KEY={password}
        // TODO Add your release keystore in /keystore folder
        release {
            storeFile file('keystore/release.keystore')
            keyAlias 'alias'
            storePassword "$System.env.APP_KEY"
            keyPassword "$System.env.APP_KEY"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            versionNameSuffix " Debug"
            debuggable true
        }
    }

    //Needed because of this https://github.com/square/okio/issues/58
    lintOptions {
        warning 'InvalidPackage'

        abortOnError false

        htmlReport true
        // optional path to report (default will be lint-results.html in the build dir)
        htmlOutput file("$project.buildDir/reports/lint/lint.html")
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    def dependencies = rootProject.ext

    //KOTLIN
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //DAGGER
    annotationProcessor "com.google.dagger:dagger-compiler:${dependencies.daggerVersion}"
    compile "com.google.dagger:dagger:${dependencies.daggerVersion}"

    //Android
    compile "com.android.support:design:${dependencies.supportLibsVersion}"
    compile "com.android.support:appcompat-v7:${dependencies.supportLibsVersion}"
    provided "javax.annotation:jsr250-api:${dependencies.javaxAnnotationVersion}"
    compile "com.android.support:recyclerview-v7:${dependencies.recyclerViewVersion}"

    //RxJava
    compile "io.reactivex.rxjava2:rxjava:${dependencies.rxJavaVersion}"
    compile "io.reactivex.rxjava2:rxandroid:${dependencies.rxAndroidVersion}"

    // Unit tests dependencies
    testCompile "junit:junit:${dependencies.jUnitVersion}"
    testCompile "org.mockito:mockito-core:${dependencies.mockitoVersion}"

    //UI Tests Dependencies
    androidTestProvided "javax.annotation:jsr250-api:${dependencies.javaxAnnotationVersion}"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:${dependencies.daggerVersion}"
    androidTestCompile "com.google.dagger:dagger:${dependencies.daggerVersion}"
    androidTestCompile "org.mockito:mockito-core:${dependencies.mockitoVersion}"
    androidTestCompile "com.github.fabioCollini:DaggerMock:${dependencies.daggerMockVersion}"

    androidTestCompile("com.android.support.test.espresso:espresso-core:${dependencies.espressoVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile("com.android.support.test:runner:${dependencies.testRunnerVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile("com.android.support.test:rules:${dependencies.testRulesVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestCompile "com.google.dexmaker:dexmaker:${dependencies.dexMakerVersion}"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:${dependencies.dexMakerVersion}"

    // Custom checkstyle rules
    checkstyle project(':custom-checkstyle')
}

// Log out test results to console
tasks.matching { it instanceof Test }.
        all {
            testLogging.events = ["failed", "passed", "skipped"]
        }

//We use this to check gradle compiling times individually
class TimingsListener implements TaskExecutionListener, BuildListener {

    private Clock clock
    private timings = []

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}

    @Override
    void beforeExecute(Task task) {
        clock = new org.gradle.util.Clock()
    }

    @Override
    void afterExecute(Task task, TaskState state) {
        def miliseconds = clock.timeInMs
        timings.add([miliseconds, task.path])
        task.project.logger.warn "${task.path} took ${miliseconds}ms"
    }
}

gradle.addListener new TimingsListener()
