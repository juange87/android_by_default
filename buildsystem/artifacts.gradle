//info here:http://www.jayway.com/2015/03/13/producing-better-named-android-apks-with-gradle/
android.applicationVariants.all { variant ->

    String variantName = variant.name.toLowerCase();
    if (variantName.contains(android.buildTypes.release.name)) {
        def appName = "ABD"

        variant.outputs.each { output ->
            def newApkName
            //If there's no ZipAlign task it means that our artifact will be unaligned and we need to mark it as such.
            if (output.zipAlign) {
                newApkName = "${appName}-${output.baseName}-br_${getWorkingBranch()}-v.${variant.versionName}-time-${buildTime()}.apk"
            } else {
                newApkName = "${appName}-${output.baseName}-br_${getWorkingBranch()}-v.${variant.versionName}-time_${buildTime()}-unaligned.apk"
            }
            output.outputFile = new File(output.outputFile.parent, newApkName)
        }
    }
}

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('HH-mm-dd-MM-yyyy')
    return formattedDate
}

/**
 * http://fabiendem.github.io/blog/2014/03/17/get-the-git-working-branch-in-gradle/
 */
def getWorkingBranch() {
    // Triple double-quotes for the breaklines
    def workingBranch = """git --git-dir=${rootDir}/.git
                               --work-tree=${rootDir}/
                               rev-parse --abbrev-ref HEAD""".execute().text.trim()
    print "Working branch: " + workingBranch
    workingBranch = workingBranch.replaceAll("/" , "-")
    return workingBranch
}